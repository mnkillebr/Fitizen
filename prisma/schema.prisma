// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(cuid())
  email                 String             @unique
  passwordHash          String?
  firstName             String
  lastName              String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  socialLogins          SocialLogin[]
  userSubscriptions     UserSubscription[]
  workoutLogs           WorkoutLog[]
  userRoutines          Routine[]
  userPrograms          Program[]
  leaderboardScores     Leaderboard[]
  scheduledWorkouts     WorkoutSession[]
  scheduledAppointments Appointment[]

  role                  Role
}

model SocialLogin {
  id             String    @id @default(cuid())
  provider       String
  providerUserId String
  user           User   @relation(fields: [userId], references: [id])
  userId         String

  @@unique([provider, providerUserId])
}

model Subscription {
  id                String             @id @default(cuid())
  name              String
  price             Decimal
  description       String?
  userSubscriptions UserSubscription[]
}

model UserSubscription {
  id             String          @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  startDate      DateTime
  endDate        DateTime?
}

model Program {
  id          String              @id @default(cuid())
  name        String
  description String?
  isFree      Boolean          @default(false)
  price       Decimal?

  youtubeLink   String?
  s3ImageKey    String?
  s3VideoKey    String?

  routines    ProgramRoutine[]

  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
}

model Routine {
  id            String             @id @default(cuid())
  name          String
  description   String?
  isFree        Boolean?            @default(false)

  youtubeLink   String?
  s3ImageKey    String?
  s3VideoKey    String?

  programs      ProgramRoutine[]
  exercises     RoutineExercise[]
  workoutLogs   WorkoutLog[]
  leaderboard   Leaderboard[]
  sessions      WorkoutSession[]

  createdAt     DateTime           @default(now())
  
  user        User?                @relation(fields: [userId], references: [id])
  userId      String?
}

// model UserProgram {
//   user        User      @relation(fields: [userId], references: [id])
//   userId      String
//   program     Program   @relation(fields: [programId], references: [id])
//   programId   String

//   @@id([userId, programId])
// }

// model UserRoutine {
//   user        User      @relation(fields: [userId], references: [id])
//   userId      String
//   routine     Routine   @relation(fields: [routineId], references: [id])
//   routineId   String

//   @@id([userId, routineId])
// }

model ProgramRoutine {
  program   Program @relation(fields: [programId], references: [id])
  programId String
  routine   Routine @relation(fields: [routineId], references: [id])
  routineId String

  @@id([programId, routineId])
}

model Exercise {
  id            String               @id @default(cuid())
  name          String
  description   String?
  isFree        Boolean           @default(false)
  routines      RoutineExercise[]
  exerciseLogs  ExerciseLog[]
  cues          String[]
  tips          String[]

  youtubeLink   String?
  s3ImageKey    String?
  s3VideoKey    String?
  tags          String[]

  balance       BalanceType?
  balanceLevel  BalanceLevel?
  body          BodyFocus[]
  contraction   ContractionType?
  equipment     Equipment[]
  joint         Joint[]
  lift          LiftType?
  muscles       MuscleGroup[]
  pattern       MovementPattern[]
  plane         MovementPlane[]
  stretch       StretchType?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RoutineExercise {
  routine           Routine @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routineId         String
  exercise          Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId        String
  orderInRoutine    Int
  circuitId         String?
  sets              String?
  target            ExerciseTarget
  reps              String?
  time              String?
  notes             String?
  rest              String
  side              Side?

  @@id([routineId, exerciseId])
}

model WorkoutLog {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  routine       Routine       @relation(fields: [routineId], references: [id])
  routineId     String
  date          DateTime      @default(now())
  duration      String        
  exerciseLogs  ExerciseLog[]
}

model ExerciseLog {
  id           String        @id @default(cuid())
  workoutLog   WorkoutLog    @relation(fields: [workoutLogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutLogId String
  exercise     Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId   String
  circuitId    String?
  target       ExerciseTarget
  time         String?
  targetReps   String?
  sets         ExerciseLogSet[]

}

model ExerciseLogSet {
  id              String        @id @default(cuid())
  exerciseLog     ExerciseLog   @relation(fields: [exerciseLogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseLogId   String
  set             String
  actualReps      String?
  load            Float?
  notes           String?
  unit            LoadUnit      @default(pound)
}

model WorkoutSession {
  id         String       @id @default(cuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  routineId  String
  routine    Routine      @relation(fields: [routineId], references: [id])
  startTime  String
  endTime    String
  // type       SessionType
  recurrence Recurrence?
}

model Coach {
  id               String          @id @default(cuid())
  name             String
  availability     Availability[]
  appointments     Appointment[]
}

model Availability {
  id           String       @id @default(cuid())
  coachId      String
  coach        Coach        @relation(fields: [coachId], references: [id])
  dayOfWeek    Int // 0 = Sunday, 1 = Monday, etc.
  startTime    String
  endTime      String
}

model Appointment {
  id         String       @id @default(cuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  coachId    String
  coach      Coach        @relation(fields: [coachId], references: [id])
  startTime  String
  endTime    String
  type       AppointmentType
}

enum AppointmentType {
  GOAL_SETTING
  FOLLOWUP
}

model Leaderboard {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  routine  Routine  @relation(fields: [routineId], references: [id])
  routineId String
  score    Int
  date     DateTime @default(now())
}

enum Role {
  admin
  user
}

// Enums for Exercise Properties
enum BalanceType {
  bilateral
  unilateral
}

enum BalanceLevel {
  static
  dynamic
}

enum BodyFocus {
  upper
  lower
  core
  full
}

enum ContractionType {
  isometric
  isotonic
}

enum Equipment {
  bodyweight
  dumbbell
  kettlebell
  barbell
  resistance_band
  suspension
  parallette
  slider_discs
  gymnastics_rings
}

enum Joint {
  ankle
  knee
  hip
  shoulder
  elbow
  wrist
}

enum LiftType {
  compound
  isolation
}

enum LoadUnit {
  bodyweight
  kilogram
  pound
}

enum MuscleGroup {
  quads
  hamstrings
  glutes
  calves
  shoulders
  biceps
  triceps
  forearms
  pecs
  lats
  traps
  hip_flexors
  erectors
  adductors
  abductors
  abs
  obliques
  serratus
  pelvic_floor
}

enum MovementPattern {
  push
  pull
  core
  squat
  hinge
  lunge
  rotational
  locomotive
}

enum MovementPlane {
  frontal
  sagittal
  transverse
}

enum StretchType {
  static
  dynamic
}

enum SectionType {
  warmup
  main
  cooldown
}

enum GroupType {
  circuit
  regular
}

enum ExerciseTarget {
  reps
  time
}

enum Side {
  left
  right
  none
}

// enum SessionType {
//   STUDY
//   NAP
//   FOCUS
// }

enum Recurrence {
  DAILY
  WEEKLY
  MONTHLY
}
